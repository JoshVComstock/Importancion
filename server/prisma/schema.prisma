generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user  Int    @id @default(autoincrement())
  email    String @unique @db.VarChar(100)
  password String @db.VarChar(150)

  productos productos[]
  idRol     Int
  R_Rol     rol         @relation(fields: [idRol], references: [id_rol])
}

model rol {
  id_rol Int    @id @default(autoincrement())
  rol    String
  User   User[]
}

// --------------------productos -------------------
model productos {
  id_productos       Int            @id @default(autoincrement())
  numItem            String         @db.VarChar(50) //quisas no 
  codigo_importacion String         @db.VarChar(100)
  nombre             String         @db.VarChar(300)
  imageUrl           String
  idTipoProducto     Int
  R_tipoProducto     tipoProducto   @relation(fields: [idTipoProducto], references: [id_tipoProducto])
  observaciones      String         @db.VarChar(600)
  cantidad           Int
  costo              Float
  impuestoCompra     Float
  impuestoVenta      Float
  idCategoria        Int
  R_Categoria        categorias     @relation(fields: [idCategoria], references: [id_categoria])
  idLote             Int
  R_Lote             lote           @relation(fields: [idLote], references: [id_lote])
  colores            String[]
  volumen            Float
  alto               Float
  ancho              Float
  idencargado        Int
  R_Encargado        User           @relation(fields: [idencargado], references: [id_user])
  detalleventa       detalleventa[]
}

model tipoProducto {
  id_tipoProducto Int         @id @default(autoincrement())
  tipo            String      @db.VarChar(300)
  productos       productos[]
}

// model precioProducto {
//   id_precioProducto  Int   @id @default(autoincrement())
//   idProducto         Int
//   precioVentaDirecta Float
//   precioVenta        Float
//   precioMayor        Float
//   utilidad           Float
// }

model unidades {
  id_unidades Int    @id @default(autoincrement())
  tipoUnidad  String @db.VarChar(50)
}

//  -------------por si necesita algun recurso 
// model multimedia {
//   id_multimedia Int    @id @default(autoincrement())
//   urlRecurso    String @db.VarChar(200)
// }

model categorias {
  id_categoria Int         @id @default(autoincrement())
  nombre       String      @db.VarChar(350)
  productos    productos[]
}

model lote {
  id_lote   Int         @id @default(autoincrement())
  lote      String
  NumSerial String
  productos productos[]
}

// ------------------------ Recepciones Producots 
model recepciones {
  id_recepciones Int @id @default(autoincrement())
}

//  ------------ventas 

model ventas {
  id_ventas      Int          @id @default(autoincrement())
  idDetalleVenta Int
  R_detalleVenta detalleventa @relation(fields: [idDetalleVenta], references: [idDetalleVenta])
}

model detalleventa {
  idDetalleVenta Int        @id @default(autoincrement())
  idProducto     Int
  R_producto     productos  @relation(fields: [idProducto], references: [id_productos])
  cantidad       Int
  detalle        String     @db.VarChar(300)
  idCambio       Int
  R_TipoCambio   tipoCambio @relation(fields: [idCambio], references: [id_tipoCambio])
  idMetodo       Int
  R_metodo       MetodoPago @relation(fields: [idMetodo], references: [id_Metodo])
  ventas         ventas[]
}

model tipoCambio {
  id_tipoCambio Int            @id @default(autoincrement())
  tipo          String
  detalleventa  detalleventa[]
}

model MetodoPago {
  id_Metodo Int    @id @default(autoincrement())
  metodo    String
  //campos de servicio 

  detalleventa detalleventa[]
}
